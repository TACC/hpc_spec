# ----------------------------------------------------------------------------
# Doug James
# djames (at) tacc.utexas.edu
# 2016-02-24
#
# Octave 4.0 built for LS5.
# Doug has a diary about the hows and whys of this tricky build.
# Lean and mean -- fftw3 and hdf5 support only.
#
# The Octave rpms MUST be non-relocatable. See Doug's diary.
#
# Release 1 -- Uses gcc 4.9.3 (not default gcc) with fftw3 and hdf5 support only.
#
# ----------------------------------------------------------------------------
#
# Doug's notes:
#
# To use this spec file...
#
#   Option 1:   $ rpmbuild -bb octave.spec
#   Option 2:   $ ./build_rpm octave.spec
#
# Since this build REQUIRES gcc 4.9.3, it's neither meaningful nor necessary
# to pass a compiler to the spec file.  If you do pass a compiler
# this spec file will ignore the compiler flag because the relevant code
# is commented out.
#
# To install the TWO NON-relocatable rpms generated by this spec file...
#
# rpm -hiv --nodeps tacc-octave-package-4.0.0-1.x86_64.rpm
# rpm -hiv --nodeps tacc-octave-modulefile-4.0.0-1.x86_64.rpm
#
# ...where the release number may vary.
#
# ----------------------------------------------------------------------------
#
# Cyrus' template notes:
#
# Important Build-Time Environment Variables (see name-defines.inc)
# NO_PACKAGE=1    -> Do Not Build/Rebuild Package RPM
# NO_MODULEFILE=1 -> Do Not Build/Rebuild Modulefile RPM
#
# Important Install-Time Environment Variables (see post-defines.inc)
# VERBOSE=1       -> Print detailed information at install time
# RPM_DBPATH      -> Path To Non-Standard RPM Database Location
#
# Typical Command-Line Example:
# ./build_rpm.sh Bar.spec
# cd ../RPMS/x86_64
# rpm -i --relocate /tmprpm=/opt/apps Bar-package-1.1-1.x86_64.rpm
# rpm -i --relocate /tmpmod=/opt/apps Bar-modulefile-1.1-1.x86_64.rpm
# rpm -e Bar-package-1.1-1.x86_64 Bar-modulefile-1.1-1.x86_64
#
# ----------------------------------------------------------------------------

Summary: Octave: open-source MATLAB alternative (high-level language for matrix computations)

# Give the package a base name
%define pkg_base_name octave
%define MODULE_VAR    OCTAVE

# Create some macros (spec file variables)
%define major_version 4
%define minor_version 0
%define micro_version 0

%define pkg_version %{major_version}.%{minor_version}.%{micro_version}

### Toggle On/Off ###
%include rpm-dir.inc                  
##### %include compiler-defines.inc        ## NOT MEANINGFUL -- and leads to error
#%include mpi-defines.inc
########################################
### Construct name based on includes ###
########################################
#%include name-defines.inc
%include name-defines-noreloc.inc
#%include name-defines-hidden.inc
#%include name-defines-hidden-noreloc.inc
########################################
############ Do Not Remove #############
########################################

############ Do Not Change #############
Name:      %{pkg_name}
Version:   %{pkg_version}
BuildRoot: /var/tmp/%{pkg_name}-%{pkg_version}-buildroot
########################################

Release:   1
License:   GPL
Group:     Development/Tools
URL:       www.gnu.org/software/octave
Packager:  TACC - djames@tacc.utexas.edu
Source:    %{pkg_base_name}-%{pkg_version}.tar.gz

# Turn off debug package mode
%define debug_package %{nil}
%define dbg           %{nil}

%package %{PACKAGE}
Summary: The package RPM
Group:   Development/Tools
%description package
Octave for TACC systems.

%package %{MODULEFILE}
Summary: The modulefile RPM
Group:   Lmod/Modulefiles
%description modulefile
Octave for TACC systems.

%description
### This is the official Octave description, verbatim from gnu.org/software/octave
GNU Octave is a high-level interpreted language, primarily intended for numerical computations. It provides capabilities for the numerical solution of linear and nonlinear problems, and for performing other numerical experiments. It also provides extensive graphics capabilities for data visualization and manipulation. Octave is normally used through its interactive command line interface, but it can also be used to write non-interactive programs. The Octave language is quite similar to Matlab so that most programs are easily portable.

#---------------------------------------
%prep
#---------------------------------------

#------------------------
%if %{?BUILD_PACKAGE}
#------------------------
  # Delete the package installation directory.
  rm -rf $RPM_BUILD_ROOT/%{INSTALL_DIR}

%setup -n %{pkg_base_name}-%{pkg_version}

#-----------------------
%endif # BUILD_PACKAGE |
#-----------------------

#---------------------------
%if %{?BUILD_MODULEFILE}
#---------------------------
  #Delete the module installation directory.
  rm -rf $RPM_BUILD_ROOT/%{MODULE_DIR}
#--------------------------
%endif # BUILD_MODULEFILE |
#--------------------------



#---------------------------------------
%build
#---------------------------------------


#---------------------------------------
%install
#---------------------------------------

# Setup modules
%include system-load.inc

### ********************************************************************************
### Only gcc 4.9.3 is meaningful for this build; comment out compiler logic...

### module purge
### # Load Compiler
### %include compiler-load.inc
### # Load MPI Library
### #%include mpi-load.inc

# Insert further module commands

### ********************************************************************************

echo "      Building the package?: %{BUILD_PACKAGE}"
echo "   Building the modulefile?: %{BUILD_MODULEFILE}"

#------------------------
%if %{?BUILD_PACKAGE}
#------------------------

  # tmpfs is necessary here.  It's important to install octave in the real, no-kidding,
  # final, non-relocatable location.  This is because Octave creates launch scripts 
  # that contain its hard-wired paths...

  mkdir -p $RPM_BUILD_ROOT/%{INSTALL_DIR}
  mkdir -p %{INSTALL_DIR}
  mount -t tmpfs tmpfs %{INSTALL_DIR}

  #######################################
  ##### Create TACC Canary Files ########
  #######################################
  touch $RPM_BUILD_ROOT/%{INSTALL_DIR}/.tacc_install_canary
  #######################################
  ########### Do Not Remove #############
  #######################################

  #========================================
  # Insert Build/Install Instructions Here
  #========================================

### ------------------------------------------------------------------------------

module purge           # don't use reset; problematic if building as root
module load TACC       # gets us back to system defaults
module load gcc/4.9.3  # this is NOT the default, but it's here to stay and has fftw3
module load mkl        # needed for gcc; not needed (or available) for intel
module load fftw3      # NOT YET AVAIL FOR DEFAULT gcc 5.2.0
module load hdf5       # serial
module list

### ------------------------------------------------------------------------------

TACC_BLAS="-Wl,-rpath,$TACC_MKL_LIB -L$TACC_MKL_LIB -Wl,--start-group -lmkl_gf_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -lpthread -lm"
LIBRARY_PATH=$GCC_LIB
COMP_IGNORE_WARNINGS=""

export PKG_CONFIG_PATH=""

# Use serial-only FFTW
export TACC_OCTAVE_FFTW3_INC=$TACC_FFTW3_INC
export TACC_OCTAVE_FFTW3_LIB=$TACC_FFTW3_LIB

export CPATH="$TACC_HDF5_INC"
### export CPATH=""
### export CPATH=$TACC_HDF5_INC:$TACC_FLTK_INC:$TACC_GMAGICK_INC:$TACC_PCRE_INC:$TACC_FTGL_INC:$TACC_FREETYPE_INC

export TACC_OCTAVE_CPPFLAGS="-fpermissive $COMP_IGNORE_WARNINGS $STATIC_STDCXX -O3 -g"
export TACC_OCTAVE_CXXFLAGS="-fpermissive $COMP_IGNORE_WARNINGS $STATIC_STDCXX -O3 -g"
export TACC_OCTAVE_FFLAGS="-O3 -g"
export TACC_OCTAVE_CFLAGS="-O3 -g"

export TACC_OCTAVE_LDFLAGS="-Wl,-rpath,$GCC_LIB                      \
                            -Wl,-rpath,$TACC_HDF5_LIB                \
                            -Wl,-rpath,$TACC_FFTW3_LIB"

export JAVA_HOME="/usr/lib64/jvm/java-1.7.0-ibm-1.7.0" # helpful? LS5
export JAVA_OPTS="-Xmx1G"

### export LIBRARY_PATH=$TACC_PCRE_LIB:$TACC_FTGL_LIB:$TACC_FREETYPE_LIB:$TACC_FLTK_LIB:$TACC_GMAGICK_LIB:$TACC_METIS_LIB

CC=$CC CXX=$CXX FC=$FC ./configure --prefix=%{INSTALL_DIR}                   \
  --with-blas="${TACC_BLAS}"                                                 \
  --with-lapack="${TACC_BLAS}"                                               \
  --with-hdf5-includedir=$TACC_HDF5_INC                                      \
  --with-hdf5-libdir="$TACC_HDF5_LIB -Wl,-rpath,$TACC_HDF5_LIB"              \
  --with-fftw3-includedir=$TACC_FFTW3_INC                                    \
  --with-fftw3-libdir="$TACC_FFTW3_LIB -Wl,-rpath,$TACC_FFTW3_LIB"           \
  --with-fftw3f-includedir=$TACC_FFTW3_INC                                   \
  --with-fftw3f-libdir="$TACC_FFTW3_LIB -Wl,-rpath,$TACC_FFTW3_LIB"          \
  LDFLAGS="${TACC_OCTAVE_LDFLAGS}"                                           \
  FFLAGS="${TACC_OCTAVE_FFLAGS}"                                             \
  CFLAGS="${TACC_OCTAVE_CFLAGS}"                                             \
  CPPFLAGS="${TACC_OCTAVE_CPPFLAGS}"                                         \
  CXXFLAGS="${TACC_OCTAVE_CXXFLAGS}"

make -j 8
### make

#make check  ## Octave 3 took forever here; Octave 4 does nothing -- see DJ notes

# DESTDIR will not work here. See comment above.
make install

# Copy everything from tarball over to the installation directory
cp -r %{INSTALL_DIR}/ $RPM_BUILD_ROOT/%{INSTALL_DIR}/..
umount %{INSTALL_DIR}
  
# -----------------------------------------------------------------------

cat > $RPM_BUILD_ROOT/%{INSTALL_DIR}/bin/octave_pkg_prep.sh <<'EOF'
#!/bin/bash
# *****************************************************************************
#  Source this script to set the environment necessary for Octave package
#  installation "pkg install" to work properly on LS5.
#
#  Ver 2.0 (24 Feb 2016) -- initial release for LS5; based on Stampede v1.0.
#
# *****************************************************************************

echo
echo "   Setting compiler to gcc/4.9.3 and loading hdf5, fftw3, and octave itself..."
echo

module load gcc/4.9.3   # do this separately to avoid confusing modules in hierarchy
module load hdf5 fftw3 
module load octave

echo
echo "   Setting environment variables needed to build known/typical packages..."
echo

export CC=mpicc
export CXX=mpicxx
export CPATH="$TACC_HDF5_INC"
export CFLAGS="-I$TACC_HDF5_INC"
export CXXFLAGS="$CFLAGS"
export DL_LDFLAGS=" -shared -Wl,-Bsymbolic -Wl,-rpath,$TACC_HDF5_LIB -L$TACC_HDF5_LIB -lhdf5 -lz"

EOF

cat > $RPM_BUILD_ROOT/%{INSTALL_DIR}/bin/octave_pkg_prep.csh <<'EOF'
#!/bin/csh
# *****************************************************************************
#  Source this script to set the environment necessary for Octave package
#  installation "pkg install" to work properly on LS5.
#
#  Ver 2.0 (24 Feb 2016) -- initial release for LS5; based on Stampede v1.0.
#
# *****************************************************************************

echo
echo "   Setting compiler to gcc/4.9.3 and loading hdf5, fftw3, and octave itself..."
echo

module load gcc/4.9.3   # do this separately to avoid confusing modules in hierarchy
module load hdf5 fftw3 
module load octave

echo
echo "   Setting environment variables needed to build known/typical packages..."
echo

setenv CC mpicc
setenv CXX mpicxx
setenv CPATH "$TACC_HDF5_INC"
setenv CFLAGS "-I$TACC_HDF5_INC"
setenv CXXFLAGS "$CFLAGS"
setenv DL_LDFLAGS " -shared -Wl,-Bsymbolic -Wl,-rpath,$TACC_HDF5_LIB -L$TACC_HDF5_LIB -lhdf5 -lz"

EOF

# -----------------------------------------------------------------------

# Copy everything from tarball over to the installation directory
mkdir -p $RPM_BUILD_ROOT/%{INSTALL_DIR}
cp -r %{INSTALL_DIR}/ $RPM_BUILD_ROOT/%{INSTALL_DIR}/..

#-----------------------  
%endif # BUILD_PACKAGE |
#-----------------------

#---------------------------
%if %{?BUILD_MODULEFILE}
#---------------------------

  mkdir -p $RPM_BUILD_ROOT/%{MODULE_DIR}
  
  #######################################
  ##### Create TACC Canary Files ########
  #######################################
  touch $RPM_BUILD_ROOT/%{MODULE_DIR}/.tacc_module_canary
  #######################################
  ########### Do Not Remove #############
  #######################################
  
# Write out the modulefile associated with the application
cat > $RPM_BUILD_ROOT/%{MODULE_DIR}/%{MODULE_FILENAME} << 'EOF'
local help_msg=[[

Octave is an open-source alternative to MATLAB.

This module file defines the following environment variables:

TACC_OCTAVE_DIR, TACC_OCTAVE_BIN, TACC_OCTAVE_LIB, and TACC_OCTAVE_INC.

BEFORE INSTALLING PACKAGES FROM WITHIN OCTAVE ("pkg install"), source
the appropriate script to set the compiler to gcc and define the
environment variables that known/typical packages are likely to require:

    bash/zsh users execute: "source $TACC_OCTAVE_BIN/octave_pkg_prep.sh"
    csh/tcsh users execute: "source $TACC_OCTAVE_BIN/octave_pkg_prep.csh"

Updated: 24 Feb 2016
Version: %{version}

]]
help(help_msg)

%if "%{is_debug}" == "1"
setenv("TACC_%{MODULE_VAR}_DEBUG","1")
%endif

whatis("Name: %{name}")
whatis("Version: %{version}")
whatis("URL: http://www.gnu.org/software/octave")
whatis("Description: open-source alternative to MATLAB; high-level language for numerical, especially matrix, computations")

local mydir = "%{INSTALL_DIR}"  -- necessary for use in pathJoin
family("octave")
prepend_path(  "PATH",             pathJoin( mydir, "bin" )  )
prepend_path(  "MANPATH",          pathJoin( mydir, "man" )  )
prepend_path(  "LD_LIBRARY_PATH",  pathJoin( mydir, "lib" )  )
setenv(  "TACC_%{MODULE_VAR}_DIR",           mydir           )
setenv(  "TACC_%{MODULE_VAR}_MAN", pathJoin( mydir, "man" )  )
setenv(  "TACC_%{MODULE_VAR}_LIB", pathJoin( mydir, "lib" )  )
setenv(  "TACC_%{MODULE_VAR}_BIN", pathJoin( mydir, "bin" )  )

EOF
  
cat > $RPM_BUILD_ROOT/%{MODULE_DIR}/.version.%{version} << 'EOF'
#%Module3.1.1#################################################
##
## version file for %{BASENAME}%{version}
##

set     ModulesVersion      "%{version}"
EOF
  
  # Check the syntax of the generated lua modulefile only if a visible module
  %if %{?VISIBLE}
    %{SPEC_DIR}/checkModuleSyntax $RPM_BUILD_ROOT/%{MODULE_DIR}/%{MODULE_FILENAME}
  %endif
#--------------------------
%endif # BUILD_MODULEFILE |
#--------------------------


#------------------------
%if %{?BUILD_PACKAGE}
%files package
#------------------------

  %defattr(-,root,install,)
  # RPM package contains files within these directories
  %{INSTALL_DIR}

#-----------------------
%endif # BUILD_PACKAGE |
#-----------------------
#---------------------------
%if %{?BUILD_MODULEFILE}
%files modulefile 
#---------------------------

  %defattr(-,root,install,)
  # RPM modulefile contains files within these directories
  %{MODULE_DIR}

#--------------------------
%endif # BUILD_MODULEFILE |
#--------------------------

########################################
## Fix Modulefile During Post Install ##
########################################
%post %{PACKAGE}
export PACKAGE_POST=1
%include post-defines.inc
%post %{MODULEFILE}
export MODULEFILE_POST=1
%include post-defines.inc
%preun %{PACKAGE}
export PACKAGE_PREUN=1
%include post-defines.inc
########################################
############ Do Not Remove #############
########################################

#---------------------------------------
%clean
#---------------------------------------
rm -rf $RPM_BUILD_ROOT

